// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iostrovok/conveyor/faces (interfaces: IManager)

// Package mmock is a generated GoMock package.
package mmock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	check "github.com/iostrovok/check"
	faces "github.com/iostrovok/conveyor/faces"
	nodes "github.com/iostrovok/conveyor/protobuf/go/nodes"
	reflect "reflect"
	sync "sync"
	time "time"
)

// MockIManager is a mock of IManager interface
type MockIManager struct {
	ctrl     *gomock.Controller
	recorder *MockIManagerMockRecorder
}

// MockIManagerMockRecorder is the mock recorder for MockIManager
type MockIManagerMockRecorder struct {
	mock *MockIManager
}

// NewMockIManager creates a new mock instance
func NewMockIManager(ctrl *gomock.Controller) *MockIManager {
	mock := &MockIManager{ctrl: ctrl}
	mock.recorder = &MockIManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIManager) EXPECT() *MockIManagerMockRecorder {
	return m.recorder
}

// GetNextManager mocks base method
func (m *MockIManager) GetNextManager() faces.IManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextManager")
	ret0, _ := ret[0].(faces.IManager)
	return ret0
}

// GetNextManager indicates an expected call of GetNextManager
func (mr *MockIManagerMockRecorder) GetNextManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextManager", reflect.TypeOf((*MockIManager)(nil).GetNextManager))
}

// GetPrevManager mocks base method
func (m *MockIManager) GetPrevManager() faces.IManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrevManager")
	ret0, _ := ret[0].(faces.IManager)
	return ret0
}

// GetPrevManager indicates an expected call of GetPrevManager
func (mr *MockIManagerMockRecorder) GetPrevManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrevManager", reflect.TypeOf((*MockIManager)(nil).GetPrevManager))
}

// IsLast mocks base method
func (m *MockIManager) IsLast() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLast")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLast indicates an expected call of IsLast
func (mr *MockIManagerMockRecorder) IsLast() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLast", reflect.TypeOf((*MockIManager)(nil).IsLast))
}

// MetricPeriod mocks base method
func (m *MockIManager) MetricPeriod(arg0 time.Duration) faces.IManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricPeriod", arg0)
	ret0, _ := ret[0].(faces.IManager)
	return ret0
}

// MetricPeriod indicates an expected call of MetricPeriod
func (mr *MockIManagerMockRecorder) MetricPeriod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricPeriod", reflect.TypeOf((*MockIManager)(nil).MetricPeriod), arg0)
}

// Name mocks base method
func (m *MockIManager) Name() faces.Name {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(faces.Name)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockIManagerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIManager)(nil).Name))
}

// SetChanErr mocks base method
func (m *MockIManager) SetChanErr(arg0 faces.IChan) faces.IManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChanErr", arg0)
	ret0, _ := ret[0].(faces.IManager)
	return ret0
}

// SetChanErr indicates an expected call of SetChanErr
func (mr *MockIManagerMockRecorder) SetChanErr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChanErr", reflect.TypeOf((*MockIManager)(nil).SetChanErr), arg0)
}

// SetChanIn mocks base method
func (m *MockIManager) SetChanIn(arg0 faces.IChan) faces.IManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChanIn", arg0)
	ret0, _ := ret[0].(faces.IManager)
	return ret0
}

// SetChanIn indicates an expected call of SetChanIn
func (mr *MockIManagerMockRecorder) SetChanIn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChanIn", reflect.TypeOf((*MockIManager)(nil).SetChanIn), arg0)
}

// SetChanOut mocks base method
func (m *MockIManager) SetChanOut(arg0 faces.IChan) faces.IManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChanOut", arg0)
	ret0, _ := ret[0].(faces.IManager)
	return ret0
}

// SetChanOut indicates an expected call of SetChanOut
func (mr *MockIManagerMockRecorder) SetChanOut(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChanOut", reflect.TypeOf((*MockIManager)(nil).SetChanOut), arg0)
}

// SetHandler mocks base method
func (m *MockIManager) SetHandler(arg0 faces.GiveBirth) faces.IManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHandler", arg0)
	ret0, _ := ret[0].(faces.IManager)
	return ret0
}

// SetHandler indicates an expected call of SetHandler
func (mr *MockIManagerMockRecorder) SetHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHandler", reflect.TypeOf((*MockIManager)(nil).SetHandler), arg0)
}

// SetIsLast mocks base method
func (m *MockIManager) SetIsLast(arg0 bool) faces.IManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIsLast", arg0)
	ret0, _ := ret[0].(faces.IManager)
	return ret0
}

// SetIsLast indicates an expected call of SetIsLast
func (mr *MockIManagerMockRecorder) SetIsLast(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIsLast", reflect.TypeOf((*MockIManager)(nil).SetIsLast), arg0)
}

// SetNextManager mocks base method
func (m *MockIManager) SetNextManager(arg0 faces.IManager) faces.IManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNextManager", arg0)
	ret0, _ := ret[0].(faces.IManager)
	return ret0
}

// SetNextManager indicates an expected call of SetNextManager
func (mr *MockIManagerMockRecorder) SetNextManager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNextManager", reflect.TypeOf((*MockIManager)(nil).SetNextManager), arg0)
}

// SetPrevManager mocks base method
func (m *MockIManager) SetPrevManager(arg0 faces.IManager) faces.IManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPrevManager", arg0)
	ret0, _ := ret[0].(faces.IManager)
	return ret0
}

// SetPrevManager indicates an expected call of SetPrevManager
func (mr *MockIManagerMockRecorder) SetPrevManager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrevManager", reflect.TypeOf((*MockIManager)(nil).SetPrevManager), arg0)
}

// SetTestMode mocks base method
func (m *MockIManager) SetTestMode(arg0 bool, arg1 *check.C) faces.IManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTestMode", arg0, arg1)
	ret0, _ := ret[0].(faces.IManager)
	return ret0
}

// SetTestMode indicates an expected call of SetTestMode
func (mr *MockIManagerMockRecorder) SetTestMode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTestMode", reflect.TypeOf((*MockIManager)(nil).SetTestMode), arg0, arg1)
}

// SetWaitGroup mocks base method
func (m *MockIManager) SetWaitGroup(arg0 *sync.WaitGroup) faces.IManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWaitGroup", arg0)
	ret0, _ := ret[0].(faces.IManager)
	return ret0
}

// SetWaitGroup indicates an expected call of SetWaitGroup
func (mr *MockIManagerMockRecorder) SetWaitGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWaitGroup", reflect.TypeOf((*MockIManager)(nil).SetWaitGroup), arg0)
}

// SetWorkersCounter mocks base method
func (m *MockIManager) SetWorkersCounter(arg0 faces.IWorkersCounter) faces.IManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWorkersCounter", arg0)
	ret0, _ := ret[0].(faces.IManager)
	return ret0
}

// SetWorkersCounter indicates an expected call of SetWorkersCounter
func (mr *MockIManagerMockRecorder) SetWorkersCounter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWorkersCounter", reflect.TypeOf((*MockIManager)(nil).SetWorkersCounter), arg0)
}

// Start mocks base method
func (m *MockIManager) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockIManagerMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIManager)(nil).Start), arg0)
}

// Statistic mocks base method
func (m *MockIManager) Statistic() *nodes.ManagerData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistic")
	ret0, _ := ret[0].(*nodes.ManagerData)
	return ret0
}

// Statistic indicates an expected call of Statistic
func (mr *MockIManagerMockRecorder) Statistic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistic", reflect.TypeOf((*MockIManager)(nil).Statistic))
}

// Stop mocks base method
func (m *MockIManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockIManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIManager)(nil).Stop))
}
