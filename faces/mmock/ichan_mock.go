// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iostrovok/conveyor/faces (interfaces: IChan)

// Package mmock is a generated GoMock package.
package mmock

import (
	gomock "github.com/golang/mock/gomock"
	faces "github.com/iostrovok/conveyor/faces"
	nodes "github.com/iostrovok/conveyor/protobuf/go/nodes"
	reflect "reflect"
)

// MockIChan is a mock of IChan interface
type MockIChan struct {
	ctrl     *gomock.Controller
	recorder *MockIChanMockRecorder
}

// MockIChanMockRecorder is the mock recorder for MockIChan
type MockIChanMockRecorder struct {
	mock *MockIChan
}

// NewMockIChan creates a new mock instance
func NewMockIChan(ctrl *gomock.Controller) *MockIChan {
	mock := &MockIChan{ctrl: ctrl}
	mock.recorder = &MockIChanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIChan) EXPECT() *MockIChanMockRecorder {
	return m.recorder
}

// ChanIn mocks base method
func (m *MockIChan) ChanIn() faces.MainCh {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChanIn")
	ret0, _ := ret[0].(faces.MainCh)
	return ret0
}

// ChanIn indicates an expected call of ChanIn
func (mr *MockIChanMockRecorder) ChanIn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChanIn", reflect.TypeOf((*MockIChan)(nil).ChanIn))
}

// ChanOut mocks base method
func (m *MockIChan) ChanOut() faces.MainCh {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChanOut")
	ret0, _ := ret[0].(faces.MainCh)
	return ret0
}

// ChanOut indicates an expected call of ChanOut
func (mr *MockIChanMockRecorder) ChanOut() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChanOut", reflect.TypeOf((*MockIChan)(nil).ChanOut))
}

// Close mocks base method
func (m *MockIChan) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockIChanMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIChan)(nil).Close))
}

// Count mocks base method
func (m *MockIChan) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count
func (mr *MockIChanMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIChan)(nil).Count))
}

// Info mocks base method
func (m *MockIChan) Info() *nodes.ChanData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(*nodes.ChanData)
	return ret0
}

// Info indicates an expected call of Info
func (mr *MockIChanMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockIChan)(nil).Info))
}

// IsActive mocks base method
func (m *MockIChan) IsActive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActive indicates an expected call of IsActive
func (mr *MockIChanMockRecorder) IsActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*MockIChan)(nil).IsActive))
}

// Len mocks base method
func (m *MockIChan) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockIChanMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockIChan)(nil).Len))
}

// Push mocks base method
func (m *MockIChan) Push(arg0 faces.IItem) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Push", arg0)
}

// Push indicates an expected call of Push
func (mr *MockIChanMockRecorder) Push(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockIChan)(nil).Push), arg0)
}
