// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iostrovok/conveyor/faces (interfaces: IWorkBench)

// Package mmock is a generated GoMock package.
package mmock

import (
	gomock "github.com/golang/mock/gomock"
	faces "github.com/iostrovok/conveyor/faces"
	reflect "reflect"
)

// MockIWorkBench is a mock of IWorkBench interface
type MockIWorkBench struct {
	ctrl     *gomock.Controller
	recorder *MockIWorkBenchMockRecorder
}

// MockIWorkBenchMockRecorder is the mock recorder for MockIWorkBench
type MockIWorkBenchMockRecorder struct {
	mock *MockIWorkBench
}

// NewMockIWorkBench creates a new mock instance
func NewMockIWorkBench(ctrl *gomock.Controller) *MockIWorkBench {
	mock := &MockIWorkBench{ctrl: ctrl}
	mock.recorder = &MockIWorkBenchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIWorkBench) EXPECT() *MockIWorkBenchMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockIWorkBench) Add(arg0 faces.IItem) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockIWorkBenchMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIWorkBench)(nil).Add), arg0)
}

// Clean mocks base method
func (m *MockIWorkBench) Clean(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clean", arg0)
}

// Clean indicates an expected call of Clean
func (mr *MockIWorkBenchMockRecorder) Clean(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockIWorkBench)(nil).Clean), arg0)
}

// Count mocks base method
func (m *MockIWorkBench) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count
func (mr *MockIWorkBenchMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIWorkBench)(nil).Count))
}

// Get mocks base method
func (m *MockIWorkBench) Get(arg0 int) (faces.IItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(faces.IItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIWorkBenchMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIWorkBench)(nil).Get), arg0)
}

// GetPriority mocks base method
func (m *MockIWorkBench) GetPriority(arg0 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriority", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPriority indicates an expected call of GetPriority
func (mr *MockIWorkBenchMockRecorder) GetPriority(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriority", reflect.TypeOf((*MockIWorkBench)(nil).GetPriority), arg0)
}

// Len mocks base method
func (m *MockIWorkBench) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockIWorkBenchMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockIWorkBench)(nil).Len))
}
