// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iostrovok/conveyor/faces (interfaces: IInput)

// Package mmock is a generated GoMock package.
package mmock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	faces "github.com/iostrovok/conveyor/faces"
	reflect "reflect"
)

// MockIInput is a mock of IInput interface
type MockIInput struct {
	ctrl     *gomock.Controller
	recorder *MockIInputMockRecorder
}

// MockIInputMockRecorder is the mock recorder for MockIInput
type MockIInputMockRecorder struct {
	mock *MockIInput
}

// NewMockIInput creates a new mock instance
func NewMockIInput(ctrl *gomock.Controller) *MockIInput {
	mock := &MockIInput{ctrl: ctrl}
	mock.recorder = &MockIInputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIInput) EXPECT() *MockIInputMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockIInput) Context(arg0 context.Context) faces.IInput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(faces.IInput)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockIInputMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockIInput)(nil).Context), arg0)
}

// Ctx mocks base method
func (m *MockIInput) Ctx() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ctx")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Ctx indicates an expected call of Ctx
func (mr *MockIInputMockRecorder) Ctx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ctx", reflect.TypeOf((*MockIInput)(nil).Ctx))
}

// Data mocks base method
func (m *MockIInput) Data(arg0 interface{}) faces.IInput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data", arg0)
	ret0, _ := ret[0].(faces.IInput)
	return ret0
}

// Data indicates an expected call of Data
func (mr *MockIInputMockRecorder) Data(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockIInput)(nil).Data), arg0)
}

// Priority mocks base method
func (m *MockIInput) Priority(arg0 int) faces.IInput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Priority", arg0)
	ret0, _ := ret[0].(faces.IInput)
	return ret0
}

// Priority indicates an expected call of Priority
func (mr *MockIInputMockRecorder) Priority(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Priority", reflect.TypeOf((*MockIInput)(nil).Priority), arg0)
}

// SkipToName mocks base method
func (m *MockIInput) SkipToName(arg0 faces.Name) faces.IInput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SkipToName", arg0)
	ret0, _ := ret[0].(faces.IInput)
	return ret0
}

// SkipToName indicates an expected call of SkipToName
func (mr *MockIInputMockRecorder) SkipToName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkipToName", reflect.TypeOf((*MockIInput)(nil).SkipToName), arg0)
}

// Trace mocks base method
func (m *MockIInput) Trace(arg0 faces.ITrace) faces.IInput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trace", arg0)
	ret0, _ := ret[0].(faces.IInput)
	return ret0
}

// Trace indicates an expected call of Trace
func (mr *MockIInputMockRecorder) Trace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockIInput)(nil).Trace), arg0)
}

// Values mocks base method
func (m *MockIInput) Values() (context.Context, faces.ITrace, interface{}, *int, faces.Name) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Values")
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(faces.ITrace)
	ret2, _ := ret[2].(interface{})
	ret3, _ := ret[3].(*int)
	ret4, _ := ret[4].(faces.Name)
	return ret0, ret1, ret2, ret3, ret4
}

// Values indicates an expected call of Values
func (mr *MockIInputMockRecorder) Values() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Values", reflect.TypeOf((*MockIInput)(nil).Values))
}
