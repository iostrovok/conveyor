// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iostrovok/conveyor/faces (interfaces: IItem)

// Package mmock is a generated GoMock package.
package mmock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	faces "github.com/iostrovok/conveyor/faces"
	reflect "reflect"
)

// MockIItem is a mock of IItem interface
type MockIItem struct {
	ctrl     *gomock.Controller
	recorder *MockIItemMockRecorder
}

// MockIItemMockRecorder is the mock recorder for MockIItem
type MockIItemMockRecorder struct {
	mock *MockIItem
}

// NewMockIItem creates a new mock instance
func NewMockIItem(ctrl *gomock.Controller) *MockIItem {
	mock := &MockIItem{ctrl: ctrl}
	mock.recorder = &MockIItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIItem) EXPECT() *MockIItemMockRecorder {
	return m.recorder
}

// AddError mocks base method
func (m *MockIItem) AddError(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddError", arg0)
}

// AddError indicates an expected call of AddError
func (mr *MockIItemMockRecorder) AddError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddError", reflect.TypeOf((*MockIItem)(nil).AddError), arg0)
}

// AfterProcess mocks base method
func (m *MockIItem) AfterProcess(arg0 faces.Name, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterProcess", arg0, arg1)
}

// AfterProcess indicates an expected call of AfterProcess
func (mr *MockIItemMockRecorder) AfterProcess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterProcess", reflect.TypeOf((*MockIItem)(nil).AfterProcess), arg0, arg1)
}

// BeforeProcess mocks base method
func (m *MockIItem) BeforeProcess(arg0 faces.Name) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeforeProcess", arg0)
}

// BeforeProcess indicates an expected call of BeforeProcess
func (mr *MockIItemMockRecorder) BeforeProcess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeProcess", reflect.TypeOf((*MockIItem)(nil).BeforeProcess), arg0)
}

// Cancel mocks base method
func (m *MockIItem) Cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel")
}

// Cancel indicates an expected call of Cancel
func (mr *MockIItemMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockIItem)(nil).Cancel))
}

// CleanError mocks base method
func (m *MockIItem) CleanError() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanError")
}

// CleanError indicates an expected call of CleanError
func (mr *MockIItemMockRecorder) CleanError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanError", reflect.TypeOf((*MockIItem)(nil).CleanError))
}

// Finish mocks base method
func (m *MockIItem) Finish() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finish")
}

// Finish indicates an expected call of Finish
func (mr *MockIItemMockRecorder) Finish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockIItem)(nil).Finish))
}

// Get mocks base method
func (m *MockIItem) Get() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockIItemMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIItem)(nil).Get))
}

// GetContext mocks base method
func (m *MockIItem) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext
func (mr *MockIItemMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockIItem)(nil).GetContext))
}

// GetError mocks base method
func (m *MockIItem) GetError() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetError")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetError indicates an expected call of GetError
func (mr *MockIItemMockRecorder) GetError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetError", reflect.TypeOf((*MockIItem)(nil).GetError))
}

// GetHandlerError mocks base method
func (m *MockIItem) GetHandlerError() faces.Name {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHandlerError")
	ret0, _ := ret[0].(faces.Name)
	return ret0
}

// GetHandlerError indicates an expected call of GetHandlerError
func (mr *MockIItemMockRecorder) GetHandlerError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHandlerError", reflect.TypeOf((*MockIItem)(nil).GetHandlerError))
}

// GetID mocks base method
func (m *MockIItem) GetID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockIItemMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockIItem)(nil).GetID))
}

// GetLastHandler mocks base method
func (m *MockIItem) GetLastHandler() faces.Name {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastHandler")
	ret0, _ := ret[0].(faces.Name)
	return ret0
}

// GetLastHandler indicates an expected call of GetLastHandler
func (mr *MockIItemMockRecorder) GetLastHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastHandler", reflect.TypeOf((*MockIItem)(nil).GetLastHandler))
}

// GetPriority mocks base method
func (m *MockIItem) GetPriority() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriority")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPriority indicates an expected call of GetPriority
func (mr *MockIItemMockRecorder) GetPriority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriority", reflect.TypeOf((*MockIItem)(nil).GetPriority))
}

// GetSkipNames mocks base method
func (m *MockIItem) GetSkipNames() []faces.Name {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkipNames")
	ret0, _ := ret[0].([]faces.Name)
	return ret0
}

// GetSkipNames indicates an expected call of GetSkipNames
func (mr *MockIItemMockRecorder) GetSkipNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkipNames", reflect.TypeOf((*MockIItem)(nil).GetSkipNames))
}

// GetSkipToName mocks base method
func (m *MockIItem) GetSkipToName() faces.Name {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkipToName")
	ret0, _ := ret[0].(faces.Name)
	return ret0
}

// GetSkipToName indicates an expected call of GetSkipToName
func (mr *MockIItemMockRecorder) GetSkipToName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkipToName", reflect.TypeOf((*MockIItem)(nil).GetSkipToName))
}

// GetTestObject mocks base method
func (m *MockIItem) GetTestObject() faces.ITestObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestObject")
	ret0, _ := ret[0].(faces.ITestObject)
	return ret0
}

// GetTestObject indicates an expected call of GetTestObject
func (mr *MockIItemMockRecorder) GetTestObject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestObject", reflect.TypeOf((*MockIItem)(nil).GetTestObject))
}

// InitEmpty mocks base method
func (m *MockIItem) InitEmpty() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitEmpty")
}

// InitEmpty indicates an expected call of InitEmpty
func (mr *MockIItemMockRecorder) InitEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitEmpty", reflect.TypeOf((*MockIItem)(nil).InitEmpty))
}

// IsStopped mocks base method
func (m *MockIItem) IsStopped() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStopped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStopped indicates an expected call of IsStopped
func (mr *MockIItemMockRecorder) IsStopped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStopped", reflect.TypeOf((*MockIItem)(nil).IsStopped))
}

// LogTraceFinishTimef mocks base method
func (m *MockIItem) LogTraceFinishTimef(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "LogTraceFinishTimef", varargs...)
}

// LogTraceFinishTimef indicates an expected call of LogTraceFinishTimef
func (mr *MockIItemMockRecorder) LogTraceFinishTimef(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogTraceFinishTimef", reflect.TypeOf((*MockIItem)(nil).LogTraceFinishTimef), varargs...)
}

// LogTracef mocks base method
func (m *MockIItem) LogTracef(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "LogTracef", varargs...)
}

// LogTracef indicates an expected call of LogTracef
func (mr *MockIItemMockRecorder) LogTracef(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogTracef", reflect.TypeOf((*MockIItem)(nil).LogTracef), varargs...)
}

// NeedToSkip mocks base method
func (m *MockIItem) NeedToSkip(arg0 faces.IWorker) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeedToSkip", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NeedToSkip indicates an expected call of NeedToSkip
func (mr *MockIItemMockRecorder) NeedToSkip(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeedToSkip", reflect.TypeOf((*MockIItem)(nil).NeedToSkip), arg0)
}

// PushedToChannel mocks base method
func (m *MockIItem) PushedToChannel(arg0 faces.Name) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PushedToChannel", arg0)
}

// PushedToChannel indicates an expected call of PushedToChannel
func (mr *MockIItemMockRecorder) PushedToChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushedToChannel", reflect.TypeOf((*MockIItem)(nil).PushedToChannel), arg0)
}

// ReceivedFromChannel mocks base method
func (m *MockIItem) ReceivedFromChannel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceivedFromChannel")
}

// ReceivedFromChannel indicates an expected call of ReceivedFromChannel
func (mr *MockIItemMockRecorder) ReceivedFromChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceivedFromChannel", reflect.TypeOf((*MockIItem)(nil).ReceivedFromChannel))
}

// Set mocks base method
func (m *MockIItem) Set(arg0 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0)
}

// Set indicates an expected call of Set
func (mr *MockIItemMockRecorder) Set(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIItem)(nil).Set), arg0)
}

// SetHandlerError mocks base method
func (m *MockIItem) SetHandlerError(arg0 faces.Name) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHandlerError", arg0)
}

// SetHandlerError indicates an expected call of SetHandlerError
func (mr *MockIItemMockRecorder) SetHandlerError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHandlerError", reflect.TypeOf((*MockIItem)(nil).SetHandlerError), arg0)
}

// SetID mocks base method
func (m *MockIItem) SetID(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetID", arg0)
}

// SetID indicates an expected call of SetID
func (mr *MockIItemMockRecorder) SetID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockIItem)(nil).SetID), arg0)
}

// SetLastHandler mocks base method
func (m *MockIItem) SetLastHandler(arg0 faces.Name) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLastHandler", arg0)
}

// SetLastHandler indicates an expected call of SetLastHandler
func (mr *MockIItemMockRecorder) SetLastHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastHandler", reflect.TypeOf((*MockIItem)(nil).SetLastHandler), arg0)
}

// SetLock mocks base method
func (m *MockIItem) SetLock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLock")
}

// SetLock indicates an expected call of SetLock
func (mr *MockIItemMockRecorder) SetLock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLock", reflect.TypeOf((*MockIItem)(nil).SetLock))
}

// SetPriority mocks base method
func (m *MockIItem) SetPriority(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPriority", arg0)
}

// SetPriority indicates an expected call of SetPriority
func (mr *MockIItemMockRecorder) SetPriority(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPriority", reflect.TypeOf((*MockIItem)(nil).SetPriority), arg0)
}

// SetSkipNames mocks base method
func (m *MockIItem) SetSkipNames(arg0 ...faces.Name) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SetSkipNames", varargs...)
}

// SetSkipNames indicates an expected call of SetSkipNames
func (mr *MockIItemMockRecorder) SetSkipNames(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSkipNames", reflect.TypeOf((*MockIItem)(nil).SetSkipNames), arg0...)
}

// SetSkipToName mocks base method
func (m *MockIItem) SetSkipToName(arg0 faces.Name) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSkipToName", arg0)
}

// SetSkipToName indicates an expected call of SetSkipToName
func (mr *MockIItemMockRecorder) SetSkipToName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSkipToName", reflect.TypeOf((*MockIItem)(nil).SetSkipToName), arg0)
}

// SetTestObject mocks base method
func (m *MockIItem) SetTestObject(arg0 faces.ITestObject) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTestObject", arg0)
}

// SetTestObject indicates an expected call of SetTestObject
func (mr *MockIItemMockRecorder) SetTestObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTestObject", reflect.TypeOf((*MockIItem)(nil).SetTestObject), arg0)
}

// SetUnlock mocks base method
func (m *MockIItem) SetUnlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUnlock")
}

// SetUnlock indicates an expected call of SetUnlock
func (mr *MockIItemMockRecorder) SetUnlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnlock", reflect.TypeOf((*MockIItem)(nil).SetUnlock))
}

// Start mocks base method
func (m *MockIItem) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockIItemMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIItem)(nil).Start))
}

// Stopped mocks base method
func (m *MockIItem) Stopped() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stopped")
}

// Stopped indicates an expected call of Stopped
func (mr *MockIItemMockRecorder) Stopped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stopped", reflect.TypeOf((*MockIItem)(nil).Stopped))
}
